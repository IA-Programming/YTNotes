{"id":"28ac0afe-2928-48a4-b174-2e967ffc866d","data":{"nodes":[{"data":{"description":"Convert Data into plain text following a specified template.","display_name":"Parse Data","id":"ParseData-SLeN9","node":{"base_classes":["Message"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Convert Data into plain text following a specified template.","display_name":"Parse Data","documentation":"","edited":false,"field_order":["data","template","sep"],"frozen":false,"icon":"braces","output_types":[],"outputs":[{"cache":true,"display_name":"Text","method":"parse_data","name":"text","selected":"Message","types":["Message"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n"},"data":{"advanced":false,"display_name":"Data","dynamic":false,"info":"The data to convert to text.","input_types":["Data"],"list":false,"name":"data","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"other","value":""},"sep":{"advanced":true,"display_name":"Separator","dynamic":false,"info":"","list":false,"load_from_db":false,"name":"sep","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":"\n"},"template":{"advanced":false,"display_name":"Template","dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","input_types":["Message"],"list":false,"load_from_db":false,"multiline":true,"name":"template","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"{text}"}}},"type":"ParseData"},"dragging":false,"height":385,"id":"ParseData-SLeN9","position":{"x":2058.416569342206,"y":511.29047397698866},"positionAbsolute":{"x":2058.416569342206,"y":511.29047397698866},"selected":false,"type":"genericNode","width":384},{"data":{"description":"Create a prompt template with dynamic variables.","display_name":"Prompt","id":"Prompt-KSSpb","node":{"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_build_config: dict, current_build_config: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_build_config, current_build_config)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_build_config\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_build_config[\"template\"])\n        return frontend_node\n"},"context":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"context","display_name":"context","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"question":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"question","display_name":"question","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"template":{"advanced":false,"display_name":"Template","dynamic":false,"info":"","list":false,"load_from_db":false,"name":"template","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"type":"prompt","value":"{context}\n\n---\n\nGiven the context above, answer the question as best as possible also considering the history conversation,\n\nHISTORY:\n\n{history}\n\nUSER INTERACTION:\nQuestion: {question}\n\nAnswer: "},"history":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"history","display_name":"history","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["context","history","question"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":null,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true}],"field_order":["template"],"beta":false,"error":null,"edited":false},"type":"Prompt"},"dragging":true,"height":611,"id":"Prompt-KSSpb","position":{"x":2573.5634076427314,"y":638.8656231145751},"positionAbsolute":{"x":2573.5634076427314,"y":638.8656231145751},"selected":false,"type":"genericNode","width":384},{"data":{"description":"Generate embeddings using OpenAI models.","display_name":"OpenAI Embeddings","id":"OpenAIEmbeddings-5Ngit","node":{"base_classes":["Embeddings"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Generate embeddings using OpenAI models.","display_name":"OpenAI Embeddings","documentation":"","edited":false,"field_order":["default_headers","default_query","chunk_size","client","deployment","embedding_ctx_length","max_retries","model","model_kwargs","openai_api_base","openai_api_key","openai_api_type","openai_api_version","openai_organization","openai_proxy","request_timeout","show_progress_bar","skip_empty","tiktoken_model_name","tiktoken_enable","dimensions"],"frozen":false,"icon":"OpenAI","output_types":[],"outputs":[{"cache":true,"display_name":"Embeddings","method":"build_embeddings","name":"embeddings","selected":"Embeddings","types":["Embeddings"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","chunk_size":{"advanced":true,"display_name":"Chunk Size","dynamic":false,"info":"","list":false,"name":"chunk_size","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"int","value":1000},"client":{"advanced":true,"display_name":"Client","dynamic":false,"info":"","input_types":["Message"],"list":false,"load_from_db":false,"name":"client","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom langflow.base.embeddings.model import LCEmbeddingsModel\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=[\n                \"text-embedding-3-small\",\n                \"text-embedding-3-large\",\n                \"text-embedding-ada-002\",\n            ],\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n"},"default_headers":{"advanced":true,"display_name":"Default Headers","dynamic":false,"info":"Default headers to use for the API request.","list":false,"name":"default_headers","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"type":"dict","value":{}},"default_query":{"advanced":true,"display_name":"Default Query","dynamic":false,"info":"Default query parameters to use for the API request.","list":false,"name":"default_query","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"type":"dict","value":{}},"deployment":{"advanced":true,"display_name":"Deployment","dynamic":false,"info":"","input_types":["Message"],"list":false,"load_from_db":false,"name":"deployment","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"dimensions":{"advanced":true,"display_name":"Dimensions","dynamic":false,"info":"The number of dimensions the resulting output embeddings should have. Only supported by certain models.","list":false,"name":"dimensions","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"int","value":""},"embedding_ctx_length":{"advanced":true,"display_name":"Embedding Context Length","dynamic":false,"info":"","list":false,"name":"embedding_ctx_length","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"int","value":1536},"max_retries":{"advanced":true,"display_name":"Max Retries","dynamic":false,"info":"","list":false,"name":"max_retries","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"int","value":3},"model":{"advanced":false,"display_name":"Model","dynamic":false,"info":"","name":"model","options":["text-embedding-3-small","text-embedding-3-large","text-embedding-ada-002"],"placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":"text-embedding-3-small"},"model_kwargs":{"advanced":true,"display_name":"Model Kwargs","dynamic":false,"info":"","list":false,"name":"model_kwargs","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"type":"dict","value":{}},"openai_api_base":{"advanced":false,"display_name":"OpenAI API Base","dynamic":false,"info":"","input_types":[],"load_from_db":false,"name":"openai_api_base","password":true,"placeholder":"","required":false,"show":true,"title_case":false,"type":"str","value":""},"openai_api_key":{"advanced":false,"display_name":"OpenAI API Key","dynamic":false,"info":"","input_types":[],"load_from_db":false,"name":"openai_api_key","password":true,"placeholder":"","required":false,"show":true,"title_case":false,"type":"str","value":""},"openai_api_type":{"advanced":true,"display_name":"OpenAI API Type","dynamic":false,"info":"","input_types":[],"load_from_db":false,"name":"openai_api_type","password":true,"placeholder":"","required":false,"show":true,"title_case":false,"type":"str","value":""},"openai_api_version":{"advanced":true,"display_name":"OpenAI API Version","dynamic":false,"info":"","input_types":["Message"],"list":false,"load_from_db":false,"name":"openai_api_version","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"openai_organization":{"advanced":true,"display_name":"OpenAI Organization","dynamic":false,"info":"","input_types":["Message"],"list":false,"load_from_db":false,"name":"openai_organization","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"openai_proxy":{"advanced":true,"display_name":"OpenAI Proxy","dynamic":false,"info":"","input_types":["Message"],"list":false,"load_from_db":false,"name":"openai_proxy","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"request_timeout":{"advanced":true,"display_name":"Request Timeout","dynamic":false,"info":"","list":false,"name":"request_timeout","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"float","value":""},"show_progress_bar":{"advanced":true,"display_name":"Show Progress Bar","dynamic":false,"info":"","list":false,"name":"show_progress_bar","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"bool","value":false},"skip_empty":{"advanced":true,"display_name":"Skip Empty","dynamic":false,"info":"","list":false,"name":"skip_empty","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"bool","value":false},"tiktoken_enable":{"advanced":true,"display_name":"TikToken Enable","dynamic":false,"info":"If False, you must have transformers installed.","list":false,"name":"tiktoken_enable","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"bool","value":true},"tiktoken_model_name":{"advanced":true,"display_name":"TikToken Model Name","dynamic":false,"info":"","input_types":["Message"],"list":false,"load_from_db":false,"name":"tiktoken_model_name","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""}}},"type":"OpenAIEmbeddings"},"dragging":false,"height":489,"id":"OpenAIEmbeddings-5Ngit","position":{"x":545.8769105822055,"y":846.2614803371563},"positionAbsolute":{"x":545.8769105822055,"y":846.2614803371563},"selected":false,"type":"genericNode","width":384},{"data":{"description":"Generates text using OpenAI LLMs.","display_name":"OpenAI","id":"OpenAIModel-HVcUZ","node":{"base_classes":["LanguageModel","Message"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Generates text using OpenAI LLMs.","display_name":"OpenAI","documentation":"","edited":false,"field_order":["input_value","max_tokens","model_kwargs","json_mode","output_schema","model_name","openai_api_base","openai_api_key","temperature","stream","system_message","seed"],"frozen":false,"icon":"OpenAI","output_types":[],"outputs":[{"cache":true,"display_name":"Text","method":"text_response","name":"text_output","selected":"Message","types":["Message"],"value":"__UNDEFINED__"},{"cache":true,"display_name":"Language Model","method":"build_model","name":"model_output","selected":"LanguageModel","types":["LanguageModel"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"import operator\nfrom functools import reduce\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.constants import STREAM_INFO_TEXT\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    MessageInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        MessageInput(name=\"input_value\", display_name=\"Input\"),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\", display_name=\"Model Name\", advanced=False, options=MODEL_NAMES, value=MODEL_NAMES[0]\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        BoolInput(name=\"stream\", display_name=\"Stream\", info=STREAM_INFO_TEXT, advanced=True),\n        StrInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"System message to pass to the model.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schea is a list of dictionarie s\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.openai_api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n        model_kwargs[\"seed\"] = seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n"},"input_value":{"advanced":false,"display_name":"Input","dynamic":false,"info":"","input_types":["Message"],"list":false,"load_from_db":false,"name":"input_value","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"json_mode":{"advanced":true,"display_name":"JSON Mode","dynamic":false,"info":"If True, it will output JSON regardless of passing a schema.","list":false,"name":"json_mode","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"bool","value":false},"max_tokens":{"advanced":true,"display_name":"Max Tokens","dynamic":false,"info":"The maximum number of tokens to generate. Set to 0 for unlimited tokens.","list":false,"name":"max_tokens","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"int","value":""},"model_kwargs":{"advanced":true,"display_name":"Model Kwargs","dynamic":false,"info":"","list":false,"name":"model_kwargs","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"type":"dict","value":{}},"model_name":{"advanced":false,"display_name":"Model Name","dynamic":false,"info":"","name":"model_name","options":["gpt-4o","gpt-4-turbo","gpt-4-turbo-preview","gpt-4","gpt-3.5-turbo","gpt-3.5-turbo-0125"],"placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":"gpt-4-turbo-preview"},"openai_api_base":{"advanced":false,"display_name":"OpenAI API Base","dynamic":false,"info":"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.","list":false,"load_from_db":false,"name":"openai_api_base","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":"https://litellm-3xlzyox7uq-uc.a.run.app/"},"openai_api_key":{"advanced":false,"display_name":"OpenAI API Key","dynamic":false,"info":"The OpenAI API Key to use for the OpenAI model.","input_types":[],"load_from_db":false,"name":"openai_api_key","password":true,"placeholder":"","required":false,"show":true,"title_case":false,"type":"str","value":""},"output_schema":{"advanced":true,"display_name":"Schema","dynamic":false,"info":"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.","list":true,"name":"output_schema","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"type":"dict","value":{}},"seed":{"advanced":true,"display_name":"Seed","dynamic":false,"info":"The seed controls the reproducibility of the job.","list":false,"name":"seed","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"int","value":1},"stream":{"advanced":true,"display_name":"Stream","dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","list":false,"name":"stream","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"bool","value":false},"system_message":{"advanced":true,"display_name":"System Message","dynamic":false,"info":"System message to pass to the model.","list":false,"load_from_db":false,"name":"system_message","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":""},"temperature":{"advanced":false,"display_name":"Temperature","dynamic":false,"info":"","list":false,"name":"temperature","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"float","value":0.1}}},"type":"OpenAIModel"},"dragging":false,"height":709,"id":"OpenAIModel-HVcUZ","position":{"x":3157.8856212813316,"y":597.2028755333722},"positionAbsolute":{"x":3157.8856212813316,"y":597.2028755333722},"selected":false,"type":"genericNode","width":384},{"id":"SupabaseVectorStore-umM9l","type":"genericNode","position":{"x":1418.8499879894098,"y":286.0546673973914},"data":{"type":"SupabaseVectorStore","node":{"template":{"_type":"Component","embedding":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"embedding","display_name":"Embedding","advanced":false,"input_types":["Embeddings"],"dynamic":false,"info":"","title_case":false,"type":"other"},"ingest_data":{"trace_as_input":true,"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"ingest_data","display_name":"Ingest Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"","title_case":false,"type":"other"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import List\n\nfrom langchain_community.vectorstores import SupabaseVectorStore\nfrom supabase.client import Client, create_client\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent\nfrom langflow.helpers.data import docs_to_data\nfrom langflow.io import HandleInput, IntInput, StrInput, SecretStrInput, DataInput, MultilineInput\nfrom langflow.schema import Data\n\n\nclass SupabaseVectorStoreComponent(LCVectorStoreComponent):\n    display_name = \"Supabase\"\n    description = \"Supabase Vector Store with search capabilities\"\n    documentation = \"https://python.langchain.com/v0.2/docs/integrations/vectorstores/supabase/\"\n    name = \"SupabaseVectorStore\"\n    icon = \"Supabase\"\n\n    inputs = [\n        StrInput(name=\"supabase_url\", display_name=\"Supabase URL\", required=True),\n        SecretStrInput(name=\"supabase_service_key\", display_name=\"Supabase Service Key\", required=True),\n        StrInput(name=\"table_name\", display_name=\"Table Name\", advanced=True),\n        StrInput(name=\"query_name\", display_name=\"Query Name\"),\n        MultilineInput(name=\"search_query\", display_name=\"Search Query\"),\n        DataInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\"\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            value=4,\n            advanced=True,\n        ),\n    ]\n\n    def build_vector_store(self) -> SupabaseVectorStore:\n        return self._build_supabase()\n\n    def _build_supabase(self) -> SupabaseVectorStore:\n        supabase: Client = create_client(self.supabase_url, supabase_key=self.supabase_service_key)\n\n        supabase_vs = SupabaseVectorStore(\n            client=supabase,\n            embedding=self.embedding,\n            table_name=self.table_name,\n            query_name=self.query_name,\n        )\n\n        return supabase_vs\n\n    def search_documents(self) -> List[Data]:\n        vector_store = self._build_supabase()\n\n        if self.ingest_data.message and isinstance(self.ingest_data.message, str) and self.ingest_data.message.strip():\n            print(self.ingest_data.message)\n            docs = vector_store.similarity_search(\n                query=self.ingest_data.message,\n                k=1,\n                filter={\"user_id\": self.ingest_data.user_id}\n            )\n\n            data = docs_to_data(docs)\n            self.status = data\n            return data\n        else:\n            return []\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"number_of_results":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"number_of_results","display_name":"Number of Results","advanced":true,"dynamic":false,"info":"Number of results to return.","title_case":false,"type":"int","load_from_db":false},"query_name":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"match_videos_docs","name":"query_name","display_name":"Query Name","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str"},"search_query":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"search_query","display_name":"Search Query","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"},"supabase_service_key":{"load_from_db":false,"required":true,"placeholder":"","show":true,"value":"","name":"supabase_service_key","display_name":"Supabase Service Key","advanced":false,"input_types":[],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str"},"supabase_url":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"value":"https://fycizuevexasthdbdmom.supabase.co","name":"supabase_url","display_name":"Supabase URL","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str"},"table_name":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"videos_docs","name":"table_name","display_name":"Table Name","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str"}},"description":"Supabase Vector Store with search capabilities","icon":"Supabase","base_classes":["Data","Retriever","VectorStore"],"display_name":"Supabase","documentation":"https://python.langchain.com/v0.2/docs/integrations/vectorstores/supabase/","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Retriever"],"selected":"Retriever","name":"base_retriever","display_name":"Retriever","method":"build_base_retriever","value":"__UNDEFINED__","cache":true},{"types":["Data"],"selected":"Data","name":"search_results","display_name":"Search Results","method":"search_documents","value":"__UNDEFINED__","cache":true},{"types":["VectorStore"],"selected":"VectorStore","name":"vector_store","display_name":"Vector Store","method":"cast_vector_store","value":"__UNDEFINED__","cache":true}],"field_order":["supabase_url","supabase_service_key","table_name","query_name","search_query","ingest_data","embedding","number_of_results"],"beta":false,"edited":true},"id":"SupabaseVectorStore-umM9l","description":"Supabase Vector Store with search capabilities","display_name":"Supabase"},"selected":true,"width":384,"height":853,"positionAbsolute":{"x":1418.8499879894098,"y":286.0546673973914},"dragging":false},{"id":"TextOutput-dw2kD","type":"genericNode","position":{"x":3143.3325904046833,"y":44.15512074464418},"data":{"type":"TextOutput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"sources\",\n            display_name=\"Sources\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.sources,\n        )\n        self.status = self.sources\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sources":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"sources","display_name":"Sources","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as output.","title_case":false,"type":"str"}},"description":"Display a text output in the Playground.","icon":"type","base_classes":["Message"],"display_name":"Text Output","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true}],"field_order":["sources"],"beta":false,"edited":true},"id":"TextOutput-dw2kD","description":"Display a text output in the Playground.","display_name":"Text Output"},"selected":false,"width":384,"height":309,"positionAbsolute":{"x":3143.3325904046833,"y":44.15512074464418},"dragging":false},{"id":"CustomComponent-y4liV","type":"genericNode","position":{"x":393.31025468574524,"y":362.4269772454916},"data":{"type":"CustomComponent","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"# from langflow.field_typing import Data\nfrom langflow.custom import Component\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data\nimport json\n\n\nclass CustomComponent(Component):\n    display_name = \"Custom Component\"\n    description = \"Use as a template to create your own component.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"custom_components\"\n    name = \"CustomComponent\"\n\n    inputs = [\n        MessageTextInput(name=\"text_input\", display_name=\"text_input\", value=\"text_input\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Output\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Data:\n        data_dict = json.loads(self.text_input)\n        user_id = data_dict.get('user_id')\n        message = data_dict.get('message')\n        data = Data(user_id=user_id, message=message)\n        self.status = data\n        return data\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"text_input":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"text_input","display_name":"text_input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"}},"description":"Use as a template to create your own component.","icon":"custom_components","base_classes":["Data"],"display_name":"Custom Component","documentation":"http://docs.langflow.org/components/custom","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"output","display_name":"Output","method":"build_output","value":"__UNDEFINED__","cache":true}],"field_order":["text_input"],"beta":false,"edited":true},"id":"CustomComponent-y4liV","description":"Use as a template to create your own component.","display_name":"Custom Component"},"selected":false,"width":384,"height":337,"dragging":false,"positionAbsolute":{"x":393.31025468574524,"y":362.4269772454916}},{"id":"TextInput-SOk2b","type":"genericNode","position":{"x":-81.76716829579283,"y":455.30612704431655},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{\"user_id\":\"user_gus074t64\",\"message\":\"Ethan talk about styles in Chrome Extension\"}","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str"}},"description":"Get text inputs from the Playground.","icon":"type","base_classes":["Message"],"display_name":"Text Input","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value"],"beta":false,"edited":false},"id":"TextInput-SOk2b"},"selected":false,"width":384,"height":309,"positionAbsolute":{"x":-81.76716829579283,"y":455.30612704431655},"dragging":false},{"id":"TextOutput-MKyPI","type":"genericNode","position":{"x":3786.3476284495346,"y":550.7783860014337},"data":{"type":"TextOutput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"response\",\n            display_name=\"Text\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.response,\n        )\n        self.status = self.response\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"response":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"response","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as output.","title_case":false,"type":"str"}},"description":"Display a text output in the Playground.","icon":"type","base_classes":["Message"],"display_name":"Text Output","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true}],"field_order":["response"],"beta":false,"edited":true},"id":"TextOutput-MKyPI","description":"Display a text output in the Playground.","display_name":"Text Output"},"selected":false,"width":384,"height":309,"positionAbsolute":{"x":3786.3476284495346,"y":550.7783860014337},"dragging":false},{"id":"ParseData-5pUVE","type":"genericNode","position":{"x":864.1253994820423,"y":32.44362245108488},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_input":true,"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"data","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"\n","name":"sep","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{message}","name":"template","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false},"id":"ParseData-5pUVE"},"selected":false,"width":384,"height":385,"positionAbsolute":{"x":864.1253994820423,"y":32.44362245108488},"dragging":false},{"id":"ParseData-faHZQ","type":"genericNode","position":{"x":2535.480999712013,"y":-3.589285694744241},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_input":true,"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"data","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"\n","name":"sep","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"VIDEO_ID: {video_id}\n\nDOCUMENTS:\n{text}","name":"template","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false},"id":"ParseData-faHZQ"},"selected":false,"width":384,"height":385,"dragging":false}],"edges":[{"className":"","data":{"sourceHandle":{"dataType":"ParseData","id":"ParseData-SLeN9","name":"text","output_types":["Message"]},"targetHandle":{"fieldName":"context","id":"Prompt-KSSpb","inputTypes":["Message","Text"],"type":"str"}},"id":"reactflow__edge-ParseData-SLeN9{œdataTypeœ:œParseDataœ,œidœ:œParseData-SLeN9œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-KSSpb{œfieldNameœ:œcontextœ,œidœ:œPrompt-KSSpbœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","source":"ParseData-SLeN9","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-SLeN9œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-KSSpb","targetHandle":"{œfieldNameœ:œcontextœ,œidœ:œPrompt-KSSpbœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"},{"className":"","data":{"sourceHandle":{"dataType":"Prompt","id":"Prompt-KSSpb","name":"prompt","output_types":["Message"]},"targetHandle":{"fieldName":"input_value","id":"OpenAIModel-HVcUZ","inputTypes":["Message"],"type":"str"}},"id":"reactflow__edge-Prompt-KSSpb{œdataTypeœ:œPromptœ,œidœ:œPrompt-KSSpbœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-HVcUZ{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-HVcUZœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","source":"Prompt-KSSpb","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-KSSpbœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"OpenAIModel-HVcUZ","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-HVcUZœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"},{"source":"OpenAIEmbeddings-5Ngit","sourceHandle":"{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-5Ngitœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}","target":"SupabaseVectorStore-umM9l","targetHandle":"{œfieldNameœ:œembeddingœ,œidœ:œSupabaseVectorStore-umM9lœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"embedding","id":"SupabaseVectorStore-umM9l","inputTypes":["Embeddings"],"type":"other"},"sourceHandle":{"dataType":"OpenAIEmbeddings","id":"OpenAIEmbeddings-5Ngit","name":"embeddings","output_types":["Embeddings"]}},"id":"reactflow__edge-OpenAIEmbeddings-5Ngit{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-5Ngitœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-SupabaseVectorStore-umM9l{œfieldNameœ:œembeddingœ,œidœ:œSupabaseVectorStore-umM9lœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}","className":""},{"source":"SupabaseVectorStore-umM9l","sourceHandle":"{œdataTypeœ:œSupabaseVectorStoreœ,œidœ:œSupabaseVectorStore-umM9lœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-SLeN9","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-SLeN9œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-SLeN9","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"SupabaseVectorStore","id":"SupabaseVectorStore-umM9l","name":"search_results","output_types":["Data"]}},"id":"reactflow__edge-SupabaseVectorStore-umM9l{œdataTypeœ:œSupabaseVectorStoreœ,œidœ:œSupabaseVectorStore-umM9lœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ParseData-SLeN9{œfieldNameœ:œdataœ,œidœ:œParseData-SLeN9œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","className":""},{"source":"CustomComponent-y4liV","sourceHandle":"{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-y4liVœ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}","target":"SupabaseVectorStore-umM9l","targetHandle":"{œfieldNameœ:œingest_dataœ,œidœ:œSupabaseVectorStore-umM9lœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"ingest_data","id":"SupabaseVectorStore-umM9l","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"CustomComponent","id":"CustomComponent-y4liV","name":"output","output_types":["Data"]}},"id":"reactflow__edge-CustomComponent-y4liV{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-y4liVœ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}-SupabaseVectorStore-umM9l{œfieldNameœ:œingest_dataœ,œidœ:œSupabaseVectorStore-umM9lœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","className":""},{"source":"TextInput-SOk2b","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-SOk2bœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"CustomComponent-y4liV","targetHandle":"{œfieldNameœ:œtext_inputœ,œidœ:œCustomComponent-y4liVœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"text_input","id":"CustomComponent-y4liV","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-SOk2b","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-SOk2b{œdataTypeœ:œTextInputœ,œidœ:œTextInput-SOk2bœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-y4liV{œfieldNameœ:œtext_inputœ,œidœ:œCustomComponent-y4liVœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"OpenAIModel-HVcUZ","sourceHandle":"{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-HVcUZœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}","target":"TextOutput-MKyPI","targetHandle":"{œfieldNameœ:œresponseœ,œidœ:œTextOutput-MKyPIœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"response","id":"TextOutput-MKyPI","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"OpenAIModel","id":"OpenAIModel-HVcUZ","name":"text_output","output_types":["Message"]}},"id":"reactflow__edge-OpenAIModel-HVcUZ{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-HVcUZœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-TextOutput-MKyPI{œfieldNameœ:œresponseœ,œidœ:œTextOutput-MKyPIœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"CustomComponent-y4liV","sourceHandle":"{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-y4liVœ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-5pUVE","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-5pUVEœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-5pUVE","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"CustomComponent","id":"CustomComponent-y4liV","name":"output","output_types":["Data"]}},"id":"reactflow__edge-CustomComponent-y4liV{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-y4liVœ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}-ParseData-5pUVE{œfieldNameœ:œdataœ,œidœ:œParseData-5pUVEœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","className":""},{"source":"ParseData-5pUVE","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-5pUVEœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"SupabaseVectorStore-umM9l","targetHandle":"{œfieldNameœ:œsearch_queryœ,œidœ:œSupabaseVectorStore-umM9lœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"search_query","id":"SupabaseVectorStore-umM9l","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-5pUVE","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-5pUVE{œdataTypeœ:œParseDataœ,œidœ:œParseData-5pUVEœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-SupabaseVectorStore-umM9l{œfieldNameœ:œsearch_queryœ,œidœ:œSupabaseVectorStore-umM9lœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"ParseData-faHZQ","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-faHZQœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"TextOutput-dw2kD","targetHandle":"{œfieldNameœ:œsourcesœ,œidœ:œTextOutput-dw2kDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"sources","id":"TextOutput-dw2kD","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-faHZQ","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-faHZQ{œdataTypeœ:œParseDataœ,œidœ:œParseData-faHZQœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-TextOutput-dw2kD{œfieldNameœ:œsourcesœ,œidœ:œTextOutput-dw2kDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"SupabaseVectorStore-umM9l","sourceHandle":"{œdataTypeœ:œSupabaseVectorStoreœ,œidœ:œSupabaseVectorStore-umM9lœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-faHZQ","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-faHZQœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-faHZQ","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"SupabaseVectorStore","id":"SupabaseVectorStore-umM9l","name":"search_results","output_types":["Data"]}},"id":"reactflow__edge-SupabaseVectorStore-umM9l{œdataTypeœ:œSupabaseVectorStoreœ,œidœ:œSupabaseVectorStore-umM9lœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ParseData-faHZQ{œfieldNameœ:œdataœ,œidœ:œParseData-faHZQœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","className":""},{"source":"ParseData-5pUVE","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-5pUVEœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-KSSpb","targetHandle":"{œfieldNameœ:œquestionœ,œidœ:œPrompt-KSSpbœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"question","id":"Prompt-KSSpb","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-5pUVE","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-5pUVE{œdataTypeœ:œParseDataœ,œidœ:œParseData-5pUVEœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-KSSpb{œfieldNameœ:œquestionœ,œidœ:œPrompt-KSSpbœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":""}],"viewport":{"x":-300.94889731930675,"y":88.32199226121571,"zoom":0.680867674747551}},"description":"Visit https://docs.langflow.org/tutorials/rag-with-astradb for a detailed guide of this project.\nThis project give you both Ingestion and RAG in a single file. You'll need to visit https://astra.datastax.com/ to create an Astra DB instance, your Token and grab an API Endpoint.\nRunning this project requires you to add a file in the Files component, then define a Collection Name and click on the Play icon on the Astra DB component. \n\nAfter the ingestion ends you are ready to click on the Run button at the lower left corner and start asking questions about your data.","name":"RAG_Flow","last_tested_version":"1.0.9","endpoint_name":null,"is_component":false}